/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n      query VaultList {\n        vaults {\n          id\n          nounInVault\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets(orderBy: id, orderDirection: asc) {\n              id\n              auction {\n                startTime\n                endTime\n                settled\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    ": types.VaultListDocument,
    "\n      query Vault($vaultId: ID!) {\n        vault(id: $vaultId) {\n          id\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets {\n              id\n              auction {\n                settled\n              }\n              holder {\n                id\n              }\n              delegate {\n                id\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    ": types.VaultDocument,
    "\n      query VaultByNoun($nounId: String!) {\n        vaults(where: { noun: $nounId }) {\n          id\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets {\n              id\n              auction {\n                settled\n              }\n              holder {\n                id\n              }\n              delegate {\n                id\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    ": types.VaultByNounDocument,
    "\n      query VaultNounletAuction($vaultId: ID!, $nounletId: ID!) {\n        vault(id: $vaultId) {\n          noun {\n            nounlets(where: { id: $nounletId }) {\n              id\n              auction {\n                id\n                settled\n                settledTransactionHash\n                highestBidAmount\n                highestBidder {\n                  id\n                }\n                endTime\n                bids(orderBy: amount, orderDirection: desc) {\n                  id\n                  bidder {\n                    id\n                  }\n                  amount\n                  blockNumber\n                  blockTimestamp\n                  txIndex\n                }\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    ": types.VaultNounletAuctionDocument,
    "\n      query VaultNounletVotes($nounletId: ID!) {\n        nounlet(id: $nounletId) {\n          id\n          delegateVotes(orderBy: timestamp, orderDirection: desc) {\n            id\n            delegate {\n              id\n            }\n            timestamp\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    ": types.VaultNounletVotesDocument,
};

export function graphql(source: "\n      query VaultList {\n        vaults {\n          id\n          nounInVault\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets(orderBy: id, orderDirection: asc) {\n              id\n              auction {\n                startTime\n                endTime\n                settled\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "): (typeof documents)["\n      query VaultList {\n        vaults {\n          id\n          nounInVault\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets(orderBy: id, orderDirection: asc) {\n              id\n              auction {\n                startTime\n                endTime\n                settled\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "];
export function graphql(source: "\n      query Vault($vaultId: ID!) {\n        vault(id: $vaultId) {\n          id\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets {\n              id\n              auction {\n                settled\n              }\n              holder {\n                id\n              }\n              delegate {\n                id\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "): (typeof documents)["\n      query Vault($vaultId: ID!) {\n        vault(id: $vaultId) {\n          id\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets {\n              id\n              auction {\n                settled\n              }\n              holder {\n                id\n              }\n              delegate {\n                id\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "];
export function graphql(source: "\n      query VaultByNoun($nounId: String!) {\n        vaults(where: { noun: $nounId }) {\n          id\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets {\n              id\n              auction {\n                settled\n              }\n              holder {\n                id\n              }\n              delegate {\n                id\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "): (typeof documents)["\n      query VaultByNoun($nounId: String!) {\n        vaults(where: { noun: $nounId }) {\n          id\n          token {\n            id\n          }\n          noun {\n            id\n            currentDelegate\n            nounlets {\n              id\n              auction {\n                settled\n              }\n              holder {\n                id\n              }\n              delegate {\n                id\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "];
export function graphql(source: "\n      query VaultNounletAuction($vaultId: ID!, $nounletId: ID!) {\n        vault(id: $vaultId) {\n          noun {\n            nounlets(where: { id: $nounletId }) {\n              id\n              auction {\n                id\n                settled\n                settledTransactionHash\n                highestBidAmount\n                highestBidder {\n                  id\n                }\n                endTime\n                bids(orderBy: amount, orderDirection: desc) {\n                  id\n                  bidder {\n                    id\n                  }\n                  amount\n                  blockNumber\n                  blockTimestamp\n                  txIndex\n                }\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "): (typeof documents)["\n      query VaultNounletAuction($vaultId: ID!, $nounletId: ID!) {\n        vault(id: $vaultId) {\n          noun {\n            nounlets(where: { id: $nounletId }) {\n              id\n              auction {\n                id\n                settled\n                settledTransactionHash\n                highestBidAmount\n                highestBidder {\n                  id\n                }\n                endTime\n                bids(orderBy: amount, orderDirection: desc) {\n                  id\n                  bidder {\n                    id\n                  }\n                  amount\n                  blockNumber\n                  blockTimestamp\n                  txIndex\n                }\n              }\n            }\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "];
export function graphql(source: "\n      query VaultNounletVotes($nounletId: ID!) {\n        nounlet(id: $nounletId) {\n          id\n          delegateVotes(orderBy: timestamp, orderDirection: desc) {\n            id\n            delegate {\n              id\n            }\n            timestamp\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "): (typeof documents)["\n      query VaultNounletVotes($nounletId: ID!) {\n        nounlet(id: $nounletId) {\n          id\n          delegateVotes(orderBy: timestamp, orderDirection: desc) {\n            id\n            delegate {\n              id\n            }\n            timestamp\n          }\n        }\n        _meta {\n          block {\n            number\n            timestamp\n          }\n        }\n      }\n    "];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;